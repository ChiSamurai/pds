@use "util/custom-property" as *;

@mixin custom-properties($custom-properties, $prefix: null, $suffix: null) {
  $input-type: type-of($custom-properties);
  @if $input-type == list {
    @each $map-or-list in $custom-properties {
      @include custom-properties($map-or-list, $prefix, $suffix);
    }
  } @else if $input-type == map {
    @each $property, $value in $custom-properties {
      @if type-of($value) == map or type-of($value) == list {
        @include custom-properties($value, prefix($prefix, $property), $suffix);
      } @else if $value != null {
        #{normalize-var($property, $prefix, $suffix)}: #{var-or-default($value)};
      }
    }
  } @else {
    @error "Failed to include custom properties. Invalid input type \"#{$input-type}\". Expected list or map";
  }
}

@mixin custom-color-properties($custom-property-map, $prefix: null, $suffix: null, $rgb: false) {
  $input-type: type-of($custom-property-map);
  @if $input-type == list {
    @each $map in $custom-property-map {
      @include custom-color-properties($map, $prefix, $suffix, $rgb);
    }
  } @else if $input-type == map {
    @each $property, $color in $custom-property-map {
      @if type-of($color) == map or type-of($color) == list {
        @include custom-color-properties($color, prefix($prefix, $property), $suffix, $rgb);
      } @else if not is-var-key($color) and not is-var($color) and type-of($color) != color {
        @error "Unable to include custom color properties. Non color value provided for property \"#{$property}\"";
      } @else if $color != null {
        @include custom-color-property($property, $color, $prefix, $suffix, $rgb);
      }
    }
  } @else {
    @error "Failed to include custom color properties. Invalid input type \"#{$input-type}\". Expected list or map";
  }
}

@mixin custom-color-property($property, $color, $prefix: null, $suffix: null, $rgb: false) {
  #{normalize-var($property, $prefix, $suffix)}: #{var-or-default($color)};
  @if $rgb {
    $rgb-suffix: if($suffix, "#{$suffix}-rgb", "rgb");
    $property: normalize-var($property, $prefix, $rgb-suffix);
    @if is-var-key($color) or is-var($color) {
      #{$property}: #{var-or-default($color, $prefix: $prefix, $suffix: $rgb-suffix)};
    } @else {
      #{$property}: #{unquote("#{red($color)},#{green($color)},#{blue($color)}")};
    }
  }
}
