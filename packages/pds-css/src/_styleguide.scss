@use "sass:list";
@use "sass:string";

@use "typography";
@use "custom-property" as *;

@use "colors" as *;
@use "typographies" as *;
@use "constants" as *;
@use "mixins" as *;

$colors: (
  $gray-color-map,
  $primary-color-map,
  $link-color-map,
  $disabled-color-map,
  $good-color-map,
  $warning-color-map,
  $bad-color-map
) !default;
$typography: (
  $body-typography-map,
  $display-typography-map,
  $headline-typography-map,
  $capitalized-typography-map,
  $lead-typography-map,
  $small-typography-map,
  $tiny-typography-map,
  $blockquote-typography-map,
  $button-typography-map
) !default;

$custom-color-properties-rgb: true !default;

$spacing: $spacing !default;
$rounding: $rounding !default;

$body-typography: --body !default;

$foreground-color: --gray-darker !default;
$background-color: --gray-lighter !default;

$font-family: "PT Sans", sans-serif !default;

@mixin core {
  @at-root {
    :root {
      --spacing: #{var-or-default($spacing)};
      --rounding: #{var-or-default($rounding)};

      @include custom-color-property(--foreground, $foreground-color, $rgb: $custom-color-properties-rgb);
      @include custom-color-property(--background, $background-color, $rgb: $custom-color-properties-rgb);

      // custom color properties
      @each $color-map in $colors {
        @if $color-map != null and type-of($color-map) == map {
          @include custom-color-properties($color-map, $rgb: $custom-color-properties-rgb);
        }
      }
      // custom typography properties
      @each $typography-map in $typography {
        @if $typography-map != null and type-of($typography-map) == map {
          @include custom-properties($typography-map);
        }
      }
    }

    body {
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;

      @if $font-family == null {
        // prettier-ignore
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
      } @else {
        font-family: var-or-default($font-family);
      }
      @if $body-typography != null {
        @include typography-style($body-typography);
      }
      background-color: var(--background);
      color: var(--foreground);
    }

    *:focus {
      outline: none;
    }
  }
}

@mixin semantics {
  @include blockquote;
  @include headline;
  @include paragraph;
  @include label;
  @include link;
  @include display;
}

@mixin class-semantics {
  @include typography-variants(("body-small", "capitalized", "lead", "small", "tiny"));
  @include text-color-accents(("primary", "primary-dark", "primary-light", "good", "warning", "bad"));
}

@mixin forms {
  @at-root :root {
    --input-height: #{$input-height};
    --input-spacing: #{$input-spacing};
  }

  @include button {
    --spacing: var(--input-spacing);
  }
  @include input {
    --spacing: var(--input-spacing);
  }
}
