// Forwards <editor-fold>
@forward "styleguide/theme" as theme-*;
@forward "styleguide/typography" as typography-*;
@forward "styleguide/elevation" as elevation-*;
@forward "styleguide/colors" as color-*;

@forward "styleguide/typographies";
@forward "styleguide/elevations";
@forward "styleguide/roundings";
@forward "styleguide/spacings";
@forward "styleguide/inputs";
@forward "styleguide/themes";
@forward "styleguide/mixins";
// </editor-fold>
// Usages <editor-fold>
@use "sass:list";
@use "sass:string";

@use "util/mixins" as *;
@use "util/custom-property" as *;
@use "util/list" as *;

@use "styleguide/theme";
@use "styleguide/elevation";
@use "styleguide/typography";
@use "styleguide/mixins" as *;

@use "styleguide/colors" as *;
@use "styleguide/typographies" as *;
@use "styleguide/elevations" as *;
@use "styleguide/roundings" as *;
@use "styleguide/spacings" as *;
@use "styleguide/inputs" as *;
@use "styleguide/themes" as *;
// </editor-fold>

/// Disables, enables or scales the global spacing. Can be any floating point number (must be unit-less)
$spacing: $spacing !default;
/// Disables, enables or scales the global rounding. Can be any floating point number (must be unit-less)
$rounding: $rounding !default;

/// Gets or sets a map or a list of maps containing color properties that will be generated as so called
/// "custom color properties". Will generate 2 custom properties for each definition when $color-rgb is set
/// to `true` (eg. `--primary: #fff;` will generate `--primary-rbg: 255,255,255;` as well)
$colors: ($accent-color-map, $semantic-color-map) !default;
/// Gets or sets a list of class names generated for text accents (eg. text-primary, text-primary-dark, ...)
$color-classes: ("primary", "info", "success", "warning", "error", "gray", "gray-secondary") !default;
/// Enables or disables additional custom property generation for color properties
$color-rgb: false !default;

/// Gets or sets a map or a list of maps containing typography definitions that will be generated
$typography: $typography-map !default;
/// Gets or sets a list of class names generated for typography variants (eg. .body-small, .small, ...)
$typography-classes: ("body-small", "caption") !default;

/// Gets or sets a map or a list of maps of additional custom properties to generate
$custom-properties: ($spacing-map, $rounding-map) !default;

/// Gets or sets the typography property name to use for the body
$body-typography: --body !default;
/// Gets or sets the main foreground color to use
$foreground-color: var(--gray-primary) !default;
/// Gets or sets the main background color to use
$background-color: var(--page) !default;
/// Gets or sets the _default_ font family name to use
$font-family: "PT Sans", sans-serif !default;

/// Includes any foundational style rules as well as a custom property setup
@mixin core() {
  $default-theme: theme.define($colors, $typography, $custom-properties);

  @at-root {
    :root {
      @include theme($default-theme, $color-rgb);
    }

    body {
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;

      @if $font-family == null {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell,
          "Helvetica Neue", sans-serif;
      } @else {
        font-family: var-or-default($font-family);
      }
      @if $body-typography != null {
        @include typography-style($body-typography);
      }
      background-color: $background-color;
      color: $foreground-color;
      margin: 0;
    }

    * {
      box-sizing: border-box;
    }

    :focus {
      outline: none;
    }
  }
}

/// Includes all generally implemented html 5 elements (eg. content sectioning, text content or inline text semantics)
@mixin html5 {
  // content-sectioning
  @include headline;

  // table-content
  @include table;

  // text-content
  @include blockquote;
  @include paragraph;
  @include code;
  @include pre;

  // inline text-semantics
  @include link;

  // content-sectioning
  @include label;

  // forms
  @at-root :root {
    --input-height: #{$input-height};
  }
  @include button;
  @include input;
}

/// Includes the sheet "element" styling class
@mixin sheet {
  .sheet {
    @include inner-spacing(--space-sm);
    @include rounding(--rounding-md);

    background-color: var(--sheet);
  }
}

/// Includes utility classes based on the value of `$color-classes`
@mixin color-classes {
  @include color-accent-classes($color-classes, "text");

  @if some($color-classes, "primary") {
    @at-root .primary {
      @include theme($primary-theme);
    }
  }
  @if some($color-classes, "info") {
    @at-root .info {
      @include theme($info-theme);
    }
  }
  @if some($color-classes, "success") {
    @at-root .success {
      @include theme($success-theme);
    }
  }
  @if some($color-classes, "warning") {
    @at-root .warning {
      @include theme($warning-theme);
    }
  }
  @if some($color-classes, "error") {
    @at-root .error {
      @include theme($error-theme);
    }
  }
}

/// Includes utility classes based on the value of `$typography-classes`
@mixin typography-classes {
  @include typography-variants($typography-classes);
}
