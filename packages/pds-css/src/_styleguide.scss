// Forwards <editor-fold>
@forward "styleguide/theme" as theme-*;
@forward "styleguide/typography" as typography-*;
@forward "styleguide/elevation" as elevation-*;
@forward "styleguide/color-mods" as color-mod-*;
@forward "styleguide/colors" as color-*;

@forward "styleguide/typographies";
@forward "styleguide/elevations";
@forward "styleguide/roundings";
@forward "styleguide/spacings";
@forward "styleguide/inputs";
@forward "styleguide/mixins";
// </editor-fold>
// Usages <editor-fold>
@use "sass:list";
@use "sass:string";

@use "util/mixins" as *;
@use "util/custom-property" as *;

@use "styleguide/theme";
@use "styleguide/elevation";
@use "styleguide/typography";
@use "styleguide/mixins" as *;

@use "styleguide/colors" as *;
@use "styleguide/color-mods" as *;
@use "styleguide/typographies" as *;
@use "styleguide/elevations" as *;
@use "styleguide/roundings" as *;
@use "styleguide/spacings" as *;
@use "styleguide/inputs" as *;
// </editor-fold>

/// Disables, enables or scales the global spacing. Can be any floating point number (must be unit-less)
$spacing: $spacing !default;
/// Disables, enables or scales the global rounding. Can be any floating point number (must be unit-less)
$rounding: $rounding !default;


/// Gets or sets a map or a list of maps containing color properties that will be generated as so called
/// "custom color properties". Will generate 2 custom properties for each definition when $color-rgb is set
/// to `true` (eg. `--primary: #fff;` will generate `--primary-rbg: 255,255,255;` as well)
$colors: ($accent-color-map, $system-color-map) !default;
/// Gets or sets a list of class names generated for text accents (eg. text-primary, text-primary-dark, ...)
$color-classes: ("primary", "primary-dark", "primary-light", "good", "warning", "bad") !default;
/// Enables or disables additional custom property generation for color properties
$color-rgb: false !default;

/// Gets or sets a map or a list of maps containing typography definitions that will be generated
$typography: $typography-map !default;
/// Gets or sets a list of class names generated for typography variants (eg. .body-small, .small, ...)
$typography-classes: ("body-small", "capitalized", "lead", "small", "tiny") !default;

/// Gets or sets a map or a list of maps of additional custom properties to generate
$custom-properties: null !default;

/// Gets or sets the typography property name to use for the body
$body-typography: --body !default;
/// Gets or sets the main foreground color to use
$foreground-color: --gray-darker !default;
/// Gets or sets the main background color to use
$background-color: --gray-lighter !default;
/// Gets or sets the _default_ font family name to use
$font-family: "PT Sans", sans-serif !default;

/// Includes any foundational style rules as well as a custom property setup
@mixin core {
  $default-theme: theme.define($colors, $typography, $custom-properties);

  @at-root {
    :root {
      @include theme($default-theme, $color-rgb) {
        @include custom-color-property(--foreground, $foreground-color, $rgb: $color-rgb);
        @include custom-color-property(--background, $background-color, $rgb: $color-rgb);
      }
    }

    body {
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;

      @if $font-family == null {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
      } @else {
        font-family: var-or-default($font-family);
      }
      @if $body-typography != null {
        @include typography-style($body-typography);
      }
      background-color: var(--background);
      color: var(--foreground);
      margin: 0;
    }

    * {
      box-sizing: border-box;

      &:focus { outline: none }
    }
  }
}

/// Includes semantic text level style rules
@mixin semantics {
  @include blockquote;
  @include headline;
  @include paragraph;
  @include label;
  @include link;
  @include display;
}

/// Includes utility classes, mainly typography variants and color accents
@mixin class-semantics {
  @include typography-variants($typography-classes);
  @include text-color-accents($color-classes);
}

/// Includes form related style rules
@mixin forms {
  @at-root :root {
    --input-height: #{$input-height};
    --input-spacing: #{$input-spacing};
    --input-rounding: #{$input-rounding};
  }

  @include button {
    --spacing: var(--input-spacing);
    --rounding: var(--input-rounding);
  }
  @include input {
    --spacing: var(--input-spacing);
    --rounding: var(--input-rounding);
  }
}
