@use "coerce" as *;

@function normalize($var, $prefix: null, $suffix: null) {
  // 1. coerce the var to a string value. returns an empty string if null
  $var: to-str($var);
  // 2. check and remove the "--" custom property prefix
  $var: if(str-index($var, "--") == 1, str-slice($var, 3), $var);
  // 3. check if we have a prefix and if so, append it to the var name
  @if $prefix != null {
    // 3.1. check if the var name is truthy and if so, append the dash delimiter and prefix value
    $var: if($var != null and $var != "", "#{$prefix}-#{$var}", $prefix);
  }
  // 4. check if we have a suffix and if so, append it to the var name
  @if $suffix != null {
    // 4.1. check if the var name is truthy and if so, append the dash delimiter and suffix value
    $var: if($var != null and $var != "", "#{$var}-#{$suffix}", $suffix);
  }
  // 5. check if the var name is falsy after all the necessary normalization steps and if NOT, then throw
  @if $var == null or $var == "" {
    @error "Illegal custom property normalization. Cannot normalize nothing";
  }
  // 6. return the normalized custom property, unquoted
  @return unquote("--#{$var}");
}

@function var($var, $fallback: null, $prefix: null, $suffix: null) {
  $var: normalize($var, $prefix, $suffix);
  @if $fallback != null {
    @return unquote("var(#{$var}, #{$fallback})");
  } @else {
    @return unquote("var(#{$var})");
  }
}
@function var-or-default($var, $fallback: null, $prefix: null, $suffix: null) {
  @if is-var-key($var) {
    @return var($var, $fallback, $prefix, $suffix);
  } @else {
    @return $var;
  }
}

@function is-var-key($value) {
  @return str-index(to-str($value), "--") == 1;
}
@function is-var($value) {
  @return str-index(to-str($value), "var") == 1;
}
